//
// Created by y3rs tr00ly on 13/12/17.
//

#include <ros/ros.h>

#include <moveit/move_group_interface/move_group_interface.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <moveit_msgs/DisplayRobotState.h>
#include <moveit_msgs/DisplayTrajectory.h>

#include <moveit_msgs/AttachedCollisionObject.h>
#include <moveit_msgs/CollisionObject.h>
#include <moveit_visual_tools/moveit_visual_tools.h>

int main(int argc, char **argv) {
    ros::init(argc, argv,"move_group_interface_tutorial");
    ros::NodeHandle node_handle;
    ros::AsyncSpinner spinner(1);
    spinner.start();

    // Setup

    moveit::planning_interface::MoveGroupInterface move_group("manipulator");

    moveit::planning_interface::PlanningSceneInterface planning_scene_interface;

  // Raw pointers are frequently used to refer to the planning group for improved performance.
    const robot_state::JointModelGroup *joint_model_group = move_group.getCurrentState()->getJointModelGroup("manipulator");

    // Visualization
    // ^^^^^^^^^^^^^
    //
    // The package MoveItVisualTools provides many capabilties for visualizing objects, robots,
    // and trajectories in Rviz as well as debugging tools such as step-by-step introspection of a script
    namespace rvt = rviz_visual_tools;
    moveit_visual_tools::MoveItVisualTools visual_tools("odom_combined");
    visual_tools.deleteAllMarkers();

    // Remote control is an introspection tool that allows users to step through a high level script
    // via buttons and keyboard shortcuts in Rviz
    visual_tools.loadRemoteControl();

    // Rviz provides many types of markers, in this demo we will use text, cylinders, and spheres
    Eigen::Affine3d text_pose = Eigen::Affine3d::Identity();
    //text_pose.translation().z() = 1.75; // above head of PR2
    visual_tools.publishText(text_pose, "MoveGroupInterface Demo", rvt::WHITE, rvt::XLARGE);

    // Batch publishing is used to reduce the number of messages being sent to Rviz for large visualizations
    visual_tools.trigger();

    // Getting basic information
    // ^^^^^^^^^^^^^^^^^^^^^^^^^
    //
    // We can print the name of the reference frame for this robot.
    ROS_INFO("Planning reference frame: %s", move_group.getPlanningFrame().c_str());
    ROS_INFO("End effector reference frame: %s", move_group.getEndEffectorLink().c_str());

    //Planning to a pose goal
    // ^^^^^^^^^^^^^^^^^^^^^^^
    // We can plan a motion for this group to a desired pose for the
    // end-effector.

    geometry_msgs::Pose target_pose;
//    target_pose.orientation.w = 1.0;
    target_pose.orientation = tf::createQuaternionMsgFromRollPitchYaw(0.0,0.0,1.0);
    target_pose.position.x = 0.28;
    target_pose.position.y = -0.7;
    target_pose.position.z = 1.0;

//    geometry_msgs::PoseStamped target_pose;
 //   target_pose.header.frame_id="world";
 //   target_pose.header.stamp=ros::Time::now()+ros::Duration(2.1);
//    target_pose.pose.orientation.w = 1.0;
//    target_pose.pose.position.x = 0.1;
//    target_pose.pose.position.y = 0.2;
//    target_pose.pose.position.z = 0.1;
//    target_pose.pose.orientation = tf::createQuaternionMsgFromRollPitchYaw(0.0,0.0,1.0);

    move_group.setPoseTarget(target_pose);

    moveit::planning_interface::MoveGroupInterface::Plan my_plan;

    bool success = move_group.plan(my_plan);

    ROS_INFO("plan: %s",success?"SUCCESS":"FAILED");

    // Visualizing plans
    // ^^^^^^^^^^^^^^^^^
    // We can also visualize the plan as a line with markers in Rviz.
    ROS_INFO("Visualizing plan 1 as trajectory line");
    visual_tools.publishAxisLabeled(target_pose, "pose");
    visual_tools.publishText(text_pose, "Pose Goal", rvt::WHITE, rvt::XLARGE);
    visual_tools.publishTrajectoryLine(my_plan.trajectory_, joint_model_group);/    visual_tools.trigger();
    visual_tools.prompt("next step");

    //if(success) {
    //    ROS_INFO_NAMED("Moving...");
    //    move_group.move();
    //}
    //sleep(5);
    ros::shutdown();
    return 0;
}
